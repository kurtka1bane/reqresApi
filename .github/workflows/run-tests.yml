name: Run API Tests with Gradle

on:
  workflow_dispatch:  # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # –®–∞–≥ 1: –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–æ–¥
      - uses: actions/checkout@v4

      # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # –®–∞–≥ 3: –î–µ–ª–∞–µ–º gradlew –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
      - name: Make gradlew executable
        run: chmod +x gradlew

      # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      - name: Run tests and parse results
        id: run_tests
        run: |
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞
          ./gradlew test --continue || true
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
          if [ ! -d "build/test-results/test" ]; then
            echo "Test results directory not found!" >&2
            echo "total=0" >> $GITHUB_OUTPUT
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed_count=0" >> $GITHUB_OUTPUT
            echo "failed=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python
          sudo apt-get update && sudo apt-get install -y python3
          
          # Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          python3 <<'EOF'
          import xml.etree.ElementTree as ET
          import glob
          import json
          import os
          import sys
          
          failed_tests = []
          total_count = 0
          
          print("::debug::Starting XML files parsing", file=sys.stderr)
          xml_files = glob.glob("build/test-results/test/*.xml")
          print(f"::debug::Found {len(xml_files)} XML files", file=sys.stderr)
          
          for xml_file in xml_files:
              try:
                  print(f"::debug::Processing file: {xml_file}", file=sys.stderr)
                  tree = ET.parse(xml_file)
                  root = tree.getroot()
                  file_tests = int(root.get("tests", 0))
                  total_count += file_tests
                  print(f"::debug::File {xml_file} contains {file_tests} tests", file=sys.stderr)
          
                  for testcase in root.findall(".//testcase"):
                      if testcase.find("failure") is not None:
                          classname = testcase.get("classname", "")
                          name = testcase.get("name", "")
                          test_id = f"{classname.split('.')[-1]}.{name.replace('()', '')}"
                          failed_tests.append(test_id)
                          print(f"::debug::Found failed test: {test_id}", file=sys.stderr)
              except Exception as e:
                  print(f"::warning::Error parsing {xml_file}: {str(e)}", file=sys.stderr)
          
          print("::debug::Parsing completed", file=sys.stderr)
          print(f"::debug::Total tests: {total_count}", file=sys.stderr)
          print(f"::debug::Failed tests count: {len(failed_tests)}", file=sys.stderr)
          print(f"::debug::Failed tests list: {failed_tests}", file=sys.stderr)
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f"total={total_count}", file=f)
              print(f"passed={total_count - len(failed_tests)}", file=f)
              print(f"failed_count={len(failed_tests)}", file=f)
              print(f"failed={json.dumps(failed_tests)}", file=f)
          EOF

      # –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
      - name: Send test results to Telegram
        if: always()
        uses: appleboy/telegram-action@v1.0.0
        with:
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤*
            ‚ñ´Ô∏è –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${{ steps.run_tests.outputs.total || '0' }}
            ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${{ steps.run_tests.outputs.passed || '0' }}
            ‚ùå –£–ø–∞–ª–æ: ${{ steps.run_tests.outputs.failed_count || '0' }}
            ${{ steps.run_tests.outputs.failed_count != '0' && format('‚ñ´Ô∏è –£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:\n%s', join(fromJSON(steps.run_tests.outputs.failed || '[]'), '\n‚ñ™Ô∏è ')) || '‚ñ´Ô∏è –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!' }}
            üîó –ó–∞–ø—É—Å–∫: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          format: "markdown"
          disable_web_page_preview: true