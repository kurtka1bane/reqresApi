name: Run API Tests with Gradle

on:
  workflow_dispatch:  # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # –®–∞–≥ 1: –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–æ–¥
      - uses: actions/checkout@v4

      # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # –®–∞–≥ 3: –î–µ–ª–∞–µ–º gradlew –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
      - name: Make gradlew executable
        run: chmod +x gradlew

      # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      - name: Run tests and parse results
        id: run_tests
        run: |
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞
          ./gradlew test --continue || true

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
          echo "Checking test results directory..."
          ls -la build/test-results/test/ || true

          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python
          sudo apt-get update && sudo apt-get install -y python3

          # Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
          python3 <<'EOF'
          import xml.etree.ElementTree as ET
          import glob
          import json
          import os
          import sys

          print("::group::Debug information")
          print("Current directory:", os.getcwd())
          print("Contents of build/test-results/test/:")
          try:
              print(os.listdir("build/test-results/test"))
          except Exception as e:
              print(f"Error listing directory: {e}")

          failed_tests = []
          total_count = 0

          xml_files = glob.glob("build/test-results/test/*.xml")
          print(f"Found {len(xml_files)} XML files")

          for xml_file in xml_files:
              try:
                  print(f"\nProcessing file: {xml_file}")
                  tree = ET.parse(xml_file)
                  root = tree.getroot()
                  file_tests = int(root.get("tests", 0))
                  total_count += file_tests
                  print(f"Total tests in file: {file_tests}")

                  for testcase in root.findall(".//testcase"):
                      if testcase.find("failure") is not None:
                          classname = testcase.get("classname", "")
                          name = testcase.get("name", "")
                          test_id = f"{classname.split('.')[-1]}.{name.replace('()', '')}"
                          failed_tests.append(test_id)
                          print(f"Found failed test: {test_id}")
              except Exception as e:
                  print(f"Error parsing {xml_file}: {str(e)}", file=sys.stderr)

          print("\nSummary:")
          print(f"Total tests: {total_count}")
          print(f"Failed tests: {len(failed_tests)}")
          print(f"Failed tests list: {failed_tests}")
          print("::endgroup::")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f"total={total_count}", file=f)
              print(f"passed={total_count - len(failed_tests)}", file=f)
              print(f"failed_count={len(failed_tests)}", file=f)
              print(f"failed={json.dumps(failed_tests)}", file=f)
          EOF

          # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          echo "Generated outputs:"
          echo "total=${{ steps.run_tests.outputs.total }}"
          echo "passed=${{ steps.run_tests.outputs.passed }}"
          echo "failed_count=${{ steps.run_tests.outputs.failed_count }}"
          echo "failed=${{ steps.run_tests.outputs.failed }}"

      # –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
      - name: Send test results to Telegram
        if: always()
        uses: appleboy/telegram-action@v1.0.0
        with:
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤*
            ‚ñ´Ô∏è –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${{ steps.run_tests.outputs.total }}
            ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${{ steps.run_tests.outputs.passed }}
            ‚ùå –£–ø–∞–ª–æ: ${{ steps.run_tests.outputs.failed_count }}
            ${{ steps.run_tests.outputs.failed_count != '0' && format('‚ñ´Ô∏è –£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:\n‚ñ™Ô∏è %s', join(fromJSON(steps.run_tests.outputs.failed), '\n‚ñ™Ô∏è ')) || '‚ñ´Ô∏è –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!' }}
            üîó –ó–∞–ø—É—Å–∫: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            üì¶ –û—Ç—á—ë—Ç: [–°–∫–∞—á–∞—Ç—å](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
          format: "markdown"
          disable_web_page_preview: true